.Model medium
.386
.STACK 256
.DATA

	groundpos                dw             115
	post1pos                 dw             40
	woodwork1pos             dw             40
	post2pos                 dw             280
	woodwork2pos             dw             40
	center_post_X            dw             155
	center_post_y            dw             60
	screen_width             dw             140h
	screen_height            dw             0c8h
	screen_boundary          dw             6                                                                                                                                         	;used to check the collision of the ball with the boundary
	time_change              db             0                                                                                                                                         	; used to check if the time has changed
	time_change2             db             1
	select_levels            db             0
	str_select_levels        db             "Press 1 to select Level 1, Press 2 to select Level 2",'$'      
	str_esc                  db             "Press Esc to go to Main Menu",'$'                                                                          	; to check if seconds has changed

	ball_x_pos               dw             144                                                                                                                                       	;x position of ball
	ball_ypos                dw             55                                                                                                                                        	;y pos of ball
	ball_size                dw             8                                                                                                                                         	; height2 and width2 of ball
	ball_x_speed             dw             2                                                                                                                                         	; speed of ball in x dimension
	ball_y_speed             dw             5                                                                                                                                         	; speed of ball in y dimension

	welcome_str              db             "Welcome to Head Soccer!"
	welcome_str_size         =              ($-welcome_str)
	newgame_str              db             "For a new game press F10"
	newgame_str_size         =              ($-newgame_str)
	chat_str                 db             "for chat press F9"
	chat_str_size            =              ($-chat_str)

	anykey_str               db             "press any key to continue"
	anykey_str_size          =              ($-anykey_str)

	msg_str                  db             "Enter your name: ",'$'

	name1                    db             15 dup(" "),'$'
	is_name_done             db             0
	sent_namechar_count      dw             0
	name2                    db             15 dup(" "),'$'
	rec_namechar_count       dw             0
	is_name_rec              db             0

	CHAT_MSG                 DB             "Welcome to Chat Room! To return to Main Menu press F8. To go to game press F10",'$'
	chat_msg_size            =              ($-CHAT_MSG)
	rec_msg                  db             15 dup(" "),'$'
	msg_sent_count           db             2
	msg_rec_count            db             1
	rec_char_count           dw             0
	sent_char_count          db             0
	rec_in_game_msg          db             15 dup(" "),'$'
	rec_in_game_char_count   dw             0
	sent_in_game_char_count  dw             0
	sent_in_game_msg         db             15 dup(" "),'$'
	sent_char                db             " "
	rec_char                 db             " "
	line                     db             "_____________________________$"
	game_invite              db             "You invited p2 to a game",'$'
	game_invite2             db             " invited you to a game. To accept press F10" , '$'
	chat_invite              db             "You invited p2 to chat" ,'$'
	chat_invite2             db             " invited you to chat. To accept press F9",'$'
	is_game_rec              db             0
	                         is_chatinv_rec db,0

	p1_score_str             db             "Score: "
	p1_score                 db             "0"
	                         P1_score_size  =($-p1_score_str)
	p2_score_str             db             "Score: "
	p2_score                 db             "0"
	                         P2_score_size  =($-p2_score_str)

	p1_ability_str           db             "Time to ability: "
	p1_ablity                db             "9"
	p1_ability_size          =              ($-p1_ability_str)
	p2_ability_str           db             "Time to ability: "
	p2_ablity                db             "9"
	p2_ability_size          =              ($-p2_ability_str)

	ability_time_str         db             "Time of ability: "
	real_ability_time1       db             " "
	ability_time_size        =              ($-ability_time_str)

	ability_time_str2        db             "Time of ability: "
	real_ability_time2       db             " "
	ability_time_size2       =              ($-ability_time_str2)

	ability_time2            db             " "
	ability_time1            db             " "

	isability1_active        db             0
	isability2_active        db             0

	isability1_available     db             0
	isability2_available     db             0

	isplayer1_frozen         db             0
	isplayer2_frozen         db             0

	p1_ability_type          db             " "                                                                                                                                       	;to store the chosen ability by player 1
	p2_ability_type          db             " "                                                                                                                                       	;to store the chosen ability by player 2
	choose_ability_str1      db             "Choose from these abilities",'$'
	choose_ability_str1_size =              ($-choose_ability_str1)

	choose_ability_str2      db             " Press 1 to decrease the size of your goal for 5 seconds",'$'
	choose_ability_str2_size =              ($-choose_ability_str2)

	choose_ability_str3      db             " Press 2 to increase the size of opponent's goal for 3 seconds",'$'
	choose_ability_str3_size =              ($-choose_ability_str3)

	choose_ability_str4      db             " Press 3 to freeze the opponent for 2 seconds",'$'
	choose_ability_str4_size =              ($-choose_ability_str4)

	is_game_over             db             0

	game_end_str             db             "To end the game press F8 "
	game_end_size            =              ($-game_end_str)

	game_over_str            db             "Game Over!"
	game_over_str_size       =              ($-game_over_str)
	return_menu_str          db             "To Return to Main Menu press F8"
	return_menu_str_size     =              ($-return_menu_str)

	scroll_counter           db             2
	scroll_counter2          db             14



	PlayerVelocity           DW             02h
	PlayerJump               DW             05h
	; Drawing of Player1
	imgW                     DW             104
	imgWmove                 DW             40
	imgH                     DW             114
	imgHmove                 DW             50
	img                      DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 16, 0, 17, 17, 16
	                         DB             16, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 16, 17, 17, 16, 0, 16, 17, 16, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17
	                         DB             17, 16, 16, 17, 0, 18, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 39, 39, 39, 12, 0, 39, 39, 39, 39, 39, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 39, 39, 39, 39, 39, 0, 39, 39, 39, 12, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 12, 12, 12, 0, 39, 39, 39
	                         DB             39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 12, 39, 12, 12, 0, 39, 12, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39
	                         DB             39, 39, 39, 39, 0, 12, 39, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 39, 39, 39, 39, 0, 39, 39, 39, 39, 39, 39, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 18, 0, 17, 17, 17, 17, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 39, 39, 39, 39, 0, 39, 39, 39
	                         DB             39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 66, 66, 66, 66, 90, 0, 89, 89, 89, 89, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 66
	                         DB             66, 66, 66, 66, 0, 89, 66, 66, 89, 89, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 0, 16, 16, 16, 16, 16, 16, 17, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 0, 184, 17, 16, 16, 16, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 17, 0, 17, 17, 16
	                         DB             16, 16, 184, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 17, 16, 16, 16, 16, 16, 184, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16
	                         DB             16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 184, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                         DB             16, 16, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 184, 184, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 12, 12
	                         DB             39, 39, 39, 39, 39, 12, 39, 39, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 12, 39, 39, 39, 39, 39, 39, 12, 12, 39, 12, 39, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 39, 39, 12, 12, 12, 39, 39, 39, 39, 39, 12, 39, 12, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 89, 12, 12, 39, 40, 40, 39, 39, 39, 40, 40, 40
	                         DB             40, 39, 12, 66, 89, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 89, 89, 40, 40, 39, 40, 40, 40, 40, 40, 40, 39, 39, 39, 39, 39, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 89, 66, 40, 39, 40
	                         DB             39, 40, 40, 40, 39, 39, 12, 39, 40, 40, 40, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 90, 89, 40, 39, 40, 40, 40, 40, 39, 40, 39, 40, 39, 39, 39, 39, 66, 66, 66, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 90, 89, 89, 40, 39, 40, 40, 39, 40, 40, 40, 39, 39, 40, 39, 39, 39, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 89, 89, 40, 12, 40, 39, 40, 39, 40, 40, 39, 39, 40
	                         DB             39, 40, 39, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 66, 66, 40, 40, 39, 39, 39, 40, 40, 39, 40, 40, 40, 39, 39, 40, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 66, 66, 40, 40, 12
	                         DB             39, 40, 39, 40, 40, 40, 40, 40, 40, 40, 39, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 39, 40, 40, 40, 39, 40, 40, 40, 40, 40, 40, 40, 40, 39, 40, 39, 39, 40, 39, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 39, 39, 40, 40, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 39, 40, 39, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 40, 40, 39, 40, 39, 40, 40, 40, 40, 40, 40, 40, 40
	                         DB             40, 40, 40, 40, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 39, 40, 40, 39, 40, 40, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 39, 39, 39, 39, 39
	                         DB             40, 40, 12, 40, 40, 40, 40, 39, 40, 39, 40, 39, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 39, 39, 40, 39, 40, 39, 39, 39, 39, 39, 39, 39, 40, 39, 39, 39, 39, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 39, 39, 12, 39, 39, 39, 39, 39, 39, 12, 12, 40, 39, 40, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 39, 40, 40, 66, 66, 66, 66, 66, 66, 40
	                         DB             40, 39, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 40, 66, 66, 66, 66, 66, 66, 66, 66, 40, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89
	                         DB             66, 66, 66, 66, 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 66, 66, 66, 66, 6, 6, 6, 6, 6, 6, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                         DB             66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 66, 66, 66, 66
	                         DB             66, 66, 66, 6, 6, 66, 66, 66, 66, 66, 66, 66, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 65, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 65, 210, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 17, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                         DB             66, 66, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 89, 31, 17, 17, 31, 66, 66, 66, 66, 31, 16, 16, 31, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 66, 31, 17
	                         DB             18, 31, 66, 66, 66, 66, 31, 16, 16, 30, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 66, 20, 20, 20, 66, 66, 66, 66, 66, 66, 21, 20, 20, 66, 17, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 210, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18
	                         DB             18, 18, 18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

	; Drawing of player2
	img2W                    DW             278
	img2Wmove                DW             214
	img2H                    DW             114
	img2Hmove                DW             50

	img2                     DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 17, 16, 0, 17, 17, 16
	                         DB             16, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 18, 16, 17, 17, 16, 0, 16, 17, 16, 16, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 17
	                         DB             17, 16, 16, 17, 0, 18, 17, 17, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 0, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 0, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 0, 32, 32, 32
	                         DB             32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 0, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32
	                         DB             32, 32, 32, 32, 0, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 0, 32, 33, 32, 32, 32, 32, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 17, 17, 17, 17, 17, 18, 0, 17, 17, 17, 17, 17, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 0, 32, 32, 32
	                         DB             32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 66, 66, 66, 66, 90, 0, 89, 89, 89, 89, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 66
	                         DB             66, 66, 66, 66, 0, 89, 66, 66, 89, 89, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 0, 16, 16, 16, 16, 16, 16, 17, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 0, 184, 17, 16, 16, 16, 16, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 17, 0, 17, 17, 16
	                         DB             16, 16, 184, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 17, 16, 16, 16, 16, 16, 184, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16
	                         DB             16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 184, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 184, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16
	                         DB             16, 16, 17, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 184, 178, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 33, 32
	                         DB             32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 90, 89, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
	                         DB             32, 32, 32, 66, 89, 89, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 89, 89, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 89, 66, 32, 32, 32
	                         DB             32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 90, 89, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 66, 66, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 90, 89, 89, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 89, 89, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
	                         DB             32, 32, 32, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 90, 66, 66, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89, 66, 66, 32, 32, 32
	                         DB             32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32
	                         DB             32, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32
	                         DB             32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 32, 32, 66, 66, 66, 66, 66, 66, 32
	                         DB             32, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 32, 66, 66, 66, 66, 66, 66, 66, 66, 32, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 89
	                         DB             66, 66, 66, 66, 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 66, 66, 66, 66, 6, 6, 6, 6, 6, 6, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                         DB             66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 66, 66, 66, 66
	                         DB             66, 66, 66, 6, 6, 66, 66, 66, 66, 66, 66, 66, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 65, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 65, 210, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 17, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66
	                         DB             66, 66, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 89, 31, 17, 17, 31, 66, 66, 66, 66, 31, 16, 16, 31, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 66, 31, 17
	                         DB             18, 31, 66, 66, 66, 66, 31, 16, 16, 30, 66, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 210, 66, 20, 20, 20, 66, 66, 66, 66, 66, 66, 21, 20, 20, 66, 17, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 210, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 66, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18
	                         DB             18, 18, 18, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
	                         DB             0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0

 
.CODE

choose_ability proc near                                      		;makes the user chooses which ability he wants to use by pressing 1,2, or 3 and storing the pressed key in a variable to initialzie the time of ability
	                            mov  ah,0
	                            mov  al,12h
	                            int  10h
							
	                            mov  ah,2
	                            mov  dx,0
	                            int  21h                          	;to set cusrsor position

	                            lea  di,name1
	                            add  di,sent_namechar_count       	;to make size name1 is its real size and dont print empty spaces
	                            mov  [di],'$'

	                            mov  ah,9
	                            mov  dx,offset name1
	                            int  21h

	                            mov  ah,2
	                            mov  dx,0
	                            mov  dx,sent_namechar_count
	                            inc  dl
	                            int  10h                          	;to set cursor position

	                            mov  ah,9
	                            mov  dx,offset choose_ability_str1
	                            int  21h

	                            mov  ah,2
	                            mov  dh,1
	                            mov  dl,0
	                            int  10h                          	;to set cusrsor position
	                            mov  ah,9
	                            mov  dx,offset choose_ability_str2
	                            int  21h

	                            mov  ah,2
	                            mov  dh,2
	                            mov  dl,0
	                            int  10h                          	;to set cusrsor position
	                            mov  ah,9
	                            mov  dx,offset choose_ability_str3
	                            int  21h

	                            mov  ah,2
	                            mov  dh,3
	                            mov  dl,0
	                            int  10h                          	;to set cusrsor position
	                            mov  ah,9
	                            mov  dx,offset choose_ability_str4
	                            int  21h
	input_ab:                   
	;Check that Transmitter Holding Register is Empty
	                            mov  dx , 3FDH                    	; Line Status Register
	AGAIN400:                   In   al , dx                      	;Read Line Status
	                            test al , 00100000b
	                            JZ   AGAIN400                     	;Not empty

	;If empty put the VALUE in Transmit data register
	                            mov  dx , 3F8H                    	; Transmit data register
	                            mov  ah,0                         	;to get user input
	                            int  16h
	                            mov  p1_ability_type,al
	                            out  dx , al


	                            cmp  al,"1"
	                            je   ability1
	                            cmp  al,"2"
	                            je   ability2
	                            cmp  al,"3"
	                            je   ability3
	                            jmp  input_ab                     	;if user didnot choose ability we wait for him to press 1, 2 or 3

	ability1:                   mov  ability_time1,"5"            	; we increase ability time by one as first loop in main always decrements it
	                            mov  real_ability_time1, "5"
	                            jmp  Receive400
	ability2:                   mov  ability_time1,"3"
	                            mov  real_ability_time1, "3"
	                            jmp  Receive400
	ability3:                   mov  ability_time1,"2"
	                            mov  real_ability_time1, "2"
	                            jmp  Receive400
	Receive400:                 
	;Check that Data is Ready
	                            mov  dx , 3FDH                    	; Line Status Register
	CHK400:                     in   al , dx
	                            test al , 1
	                            JZ   CHK400                       	;Not Ready
	;If Ready read the VALUE in Receive data register
	                            mov  dx , 03F8H
	                            in   al , dx
	                            mov  p2_ability_type,al
	                            cmp  al,"1"
	                            je   ability11
	                            cmp  al,"2"
	                            je   ability22
	                            cmp  al,"3"
	                            je   ability33
	                            jmp  Receive400                   	;if user didnot choose ability we wait for him to press 1, 2 or 3

	ability11:                  mov  ability_time2,"5"            	; we increase ability time by one as first loop in main always decrements it
	                            mov  real_ability_time2, "5"
	                            jmp  pend
	ability22:                  mov  ability_time2,"3"
	                            mov  real_ability_time2, "3"
	                            jmp  pend
	ability33:                  mov  ability_time2,"2"
	                            mov  real_ability_time2, "2"
	                            jmp  pend


	pend:                       
	                            ret
choose_ability endp


recname proc near

	                            lea  di,name2                     	;to write data in name2
	                            add  di, rec_namechar_count       	;to put character in its position is string

	;Receiving a value
	;Check that Data is Ready
	loop1:                      
	                            mov  dx , 3FDH                    	; Line Status Register
	CHK:                        in   al , dx
	                            test al , 1
	                            JZ   end                          	;Not Ready
	;If Ready read the VALUE in Receive data register
  		
	                            mov  dx , 03F8H
	                            in   al , dx
	                            cmp  al,0dh
	                            je   store_name                   	;if enter is pressed store msg
	                            cmp  al,08h
	                            je   backspace                    	;if backspace is pressed delete last character by dec [di]
	                            cmp  al,65
	                            jl   end
	;js backspace				;to avoid unppermittable characters
	                            mov  [di] , al
	                            inc  rec_namechar_count
	                            jmp  loop1


	store_name:                 

	                            mov  is_name_rec ,1

	                            jmp  end

	backspace:                  
	                            dec  rec_namechar_count
	                            jmp  loop1

	end:                        
	                            ret
recname endp



send_name proc near

	                            mov  ah,2
	                            mov  dl,8
	                            mov  dh,8                         	;set cursor X Y position
	                            int  10h

	                            mov  ah,9
	                            mov  dx, offset msg_str
	                            int  21h

	                            mov  dl,10
	;push dx
	                            lea  di,name1                     	;to store name a new message
	                            add  di,sent_namechar_count

	;mov cx,0
	loop2:                      
	;Check that Transmitter Holding Register is Empty
	                            mov  dx , 3FDH                    	; Line Status Register
	AGAIN:                      In   al , dx                      	;Read Line Status
	                            test al , 00100000b
	                            JZ   again                        	;Not empty
	;If empty put the VALUE in Transmit data register
	                            mov  dx , 3F8H                    	; Transmit data register
	                            mov  ah,0bh
	                            int  21h
	                            cmp  al,0
	                            je   end1
	                            mov  ah,2
	;pop dx
	                            mov  dx,0909h
	                            add  dx, sent_namechar_count      	;to move in correct X pos
	                            mov  dh,9
	                            int  10h
        
	                            mov  ah,1
	                            int  21h
	                            mov  [di],al
	                            mov  dx , 3F8H
	                            out  dx , al
		
	                            inc  sent_namechar_count
	;mov  al,41h
	;inc cx
	                            cmp  al,08h
	                            jz   back_space                   	;if backspace is pressed
	;cmp al,65
	;js back_space_1	;to avoid unppermittable characters
	                            cmp  al,0dh                       	;if enter isnot pressed continue, if pressed go down one line and write new string
	                            jnz  end1
		


	;pop dx
	;mov dl,0
	;int 10h

	;push dx
	;mov ah, 9
	;mov dx, offset rec_msg
	;int 21h
	;dec di		;to remove enter key from string
	;mov[di],'$'			;to finish string
	                            mov  is_name_done, 1
	                            jmp  end1

	;back_space_1:
	;cmp sent_namechar_count ,0
	;je end1
	;dec sent_namechar_count
	;to delete last character by which was unpermittable
	;jmp end1

	back_space:                 
	                            cmp  sent_namechar_count ,0
	                            je   end1
	                            dec  sent_namechar_count
	                            dec  sent_namechar_count          	;to delete last character by dec twice as it was incremented due to backspace
	end1:                       
	;pop dx					;to empty stack so proc can return to correct code segment
	                            ret
send_name endp


input_name proc near                                          		;mov dx,3fbh 			; Line Control Register
	                            mov  al,10000000b                 	;Set Divisor Latch Access Bit
	                            out  dx,al                        	;Out it
	;Set LSB byte of the Baud Rate Divisor Latch register.
	                            mov  dx,3f8h
	                            mov  al,0ch
	                            out  dx,al
	;Set MSB byte of the Baud Rate Divisor Latch register.
	                            mov  dx,3f9h
	                            mov  al,00h
	                            out  dx,al
	;Set port configuration
	                            mov  dx,3fbh
	                            mov  al,00011011b
	;0:Access to Receiver buffer, Transmitter buffer
	;0:Set Break disabled
	;011:Even Parity
	;0:One Stop Bit
	;11:8bits
	                            out  dx,al

	                            mov  ah,0
	                            mov  al,13H
	                            int  10h

	loop_name:                  
	                            cmp  is_name_done,1               	;if entering name is done go to receive name
	                            je   receive
	                            call send_name
	receive:                    
	                            cmp  is_name_rec,1                	;if name is received go check if entering name is also done
	                            je   end_name
	                            call recname
	                            jmp  loop_name

	end_name:                   
	                            cmp  is_name_done,1               	;if entering name is done end program, ifnot go to enter name
	                            je   end_all
	                            jmp  loop_name


	end_all:                    

	                            ret
input_name endp

main_menu proc near                                           		;displays main menu and waits for user input to choose between new game or chatting
	                            mov  al,12h
	                            mov  ah,0
	                            int  10h
	                            mov  si,@data                     	;moves to si the location in memory of the data segment

	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0eh                       	;color of the text (white foreground and black background)

	                            mov  cx,welcome_str_size          	;length of string
	                            mov  dh,0                         	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset welcome_str        	;mov bp the offset of the string
	                            int  10h

	                            mov  cx,newgame_str_size          	;length of string
	                            mov  dh,01                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset newgame_str        	;mov bp the offset of the string
	                            int  10h

	                            mov  cx,chat_str_size             	;length of string
	                            mov  dh,02                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset chat_str           	;mov bp the offset of the string
	                            int  10h

	                        

	                            ret
main_menu endp




scrolldown_up proc near                                       		;scroll down in upper screen
	                            mov  ax,0601h
	                            mov  bx,0
	                            mov  cl,0
	                            mov  ch,scroll_counter
	                            mov  dx,00FFh
	                            add  dh, scroll_counter
	                            int  10h
	                            ret
scrolldown_up endp

scrolldown_down proc near                                     		;scroll down in lower screen
	                            mov  ax,0601h
	                            mov  bx,0
	                            mov  cl,0
	                            mov  ch,scroll_counter2
	                            mov  dx,00FFh
	                            add  dh, scroll_counter2
	                            int  10h

	                            ret
scrolldown_down endp


print_in_game_msg proc near
	                            cmp  sent_char,65
	                            jl   check_enter
	                            lea  di,sent_in_game_msg
	                            add  di,sent_in_game_char_count
	                            mov  bh,sent_char
	                            mov  [di],bh
	                            mov  si,@data                     	;moves to si the location in memory of the data segment

	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0dh                       	;color of the text (white foreground and black background)

	                            mov  cx,15                        	;length of string
	                            mov  dh,20                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset sent_in_game_msg   	;mov bp the offset of the string
	                            int  10h
	                            inc  sent_in_game_char_count
	                            jmp  end999
	check_enter:                
	                            cmp  sent_char,0dh
	                            jne  end999
	                            mov  sent_in_game_char_count,0

	                            mov  cx,0
	                            lea  di,sent_in_game_msg
	loop8:                      
	                            mov  [di] , " "                   	;to delete old message
	                            inc  di
	                            inc  cx
	                            cmp  cx,14
	                            jl   loop8
	end999:                     
	                            ret
print_in_game_msg endp


rec_msg_in_game proc near
	                            cmp  rec_char,65
	                            jl   check_enter2
	                            lea  di,rec_in_game_msg
	                            add  di,rec_in_game_char_count
	                            mov  bh,rec_char
	                            mov  [di],bh
	                           
	                            inc  rec_in_game_char_count
	                            jmp  end6
	check_enter2:               
	                            mov  si,@data                     	;moves to si the location in memory of the data segment

	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0bh                       	;color of the text (white foreground and black background)

	                            mov  cx,15                        	;length of string
	                            mov  dh,20                        	;y coordinate
	                            mov  dl,16h                       	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset rec_in_game_msg    	;mov bp the offset of the string
	                            int  10h
	                            cmp  rec_char,0dh
	                            jne  end6
	                            mov  rec_in_game_char_count,0

	                            mov  cx,0
	                            lea  di,rec_in_game_msg
	loop6:                      
	                            mov  [di] , " "                   	;to delete old message
	                            inc  di
	                            inc  cx
	                            cmp  cx,14
	                            jl   loop6
	end6:                       
	                            ret
rec_msg_in_game endp



recmsg proc near

	                            cmp  msg_rec_count,12
	                            jne  cont2
	                            mov  msg_rec_count,1

	cont2:                      
	                            mov  dh,13
	                            add  dh,msg_rec_count
	                            mov  dl,0
	                            push dx

	reset_loop1_1:              


	                            lea  di,rec_msg                   	;to start a new message
	                            add  di, rec_char_count           	;to put character in its position is string

	;Receiving a value
	;Check that Data is Ready
	loop1_1_2:                  
	                            mov  dx , 3FDH                    	; Line Status Register
	CHK2_2_4:                   in   al , dx
	                            test al , 1
	                            JZ   end_22_3                     	;Not Ready
	;If Ready read the VALUE in Receive data register
  		
	                            mov  dx , 03F8H
	                            in   al , dx
	                            cmp  al,1bh
	                            jz   end_22_3                     	;if esc is pressed end program
	                            cmp  al,0dh
	                            je   go_down2                     	;if enter is pressed go down one line
	                            cmp  al,08h
	                            je   backspace2_1_1               	;if backspace is pressed delete last character by dec [di]
	                            mov  [di] , al
	                            inc  rec_char_count
	                            jmp  loop1_1_2


	go_down2:                   
	                            mov  ah,2
	                            pop  dx
	                            int  10h
	                            push dx


	                            mov  ah, 9
	                            mov  dx, offset rec_msg
	                            int  21h

	;pop dx
	;inc dh
	;push dx

	                            mov  cx,0
	                            lea  di,rec_msg
	del_msg1_1:                 
	                            mov  [di] , " "                   	;to delete old message
	                            inc  di
	                            inc  cx
	                            cmp  cx,14
	                            js   del_msg1_1
	                            mov  rec_char_count, 0            	;to begin from the start of string
	                            inc  msg_rec_count

	                            CMP  scroll_counter2,24
	                            jne  inc_scroll2
	                            mov  scroll_counter2,13
	inc_scroll2:                
	                            inc  scroll_counter2
	                            call scrolldown_down

	                            jmp  reset_loop1_1

	backspace2_1_1:             
	                            dec  rec_char_count
	                            jmp  loop1_1_2

	end_22_3:                   
	                            pop  dx
	                            ret


recmsg endp

draw_middle proc near

	                            mov  cx,0
	                            mov  dx,100
	                            mov  al,02h
	                            mov  ah,0ch
	back1:                      int  10h
	                            inc  cx
	                            cmp  cx,320
	                            jnz  back1
                            
	                            ret
draw_middle endp



send_msg proc near
	                            cmp  msg_sent_count,12
	                            jne  cont1_1
	                            mov  msg_sent_count,2

	cont1_1:                    
	                            mov  dh,msg_sent_count
	                            mov  dl,0
	                            push dx

	;mov cx,0
	loop2_2:                    
	;Check that Transmitter Holding Register is Empty
	                            mov  dx , 3FDH                    	; Line Status Register
	AGAIN_1:                    In   al , dx                      	;Read Line Status
	                            test al , 00100000b
	                            JZ   AGAIN_1                      	;Not empty
	;If empty put the VALUE in Transmit data register
	                            mov  dx , 3F8H                    	; Transmit data register
	                            mov  ah,0bh
	                            int  21h
	                            cmp  al,0
	                            je   end1_2_2
	                            mov  ah,2
	                            mov  dh,msg_sent_count            	;to move in correct Y pos
	                            mov  dl,0
	                            add  dl, sent_char_count          	;to move in correct X pos
	                            int  10h
        
	                            mov  ah,1
	                            int  21h
	                            mov  dx , 3F8H
	                            out  dx , al
	                            inc  sent_char_count
	;mov  al,41h
  		
	;inc cx
	                            cmp  al,1bh
	                            jz   end1_2_2                     	;if esc is pressed end program
	                            cmp  al,08h
	                            jz   back_space_2_2_2             	;if backspace is pressed
	                            cmp  al,0dh                       	;if enter isnot pressed continue, if pressed go down one line and write new string
	                            jnz  end1_2_2

	                            mov  ah,2
	                            mov  dh,msg_sent_count            	;to move in correct Y pos
	                            mov  dl,0                         	;to move in correct X pos
	                            int  10h
	;pop dx
	;mov dl,0
	;int 10h

	;push dx
	;mov ah, 9
	;mov dx, offset rec_msg
	;int 21h

	                            inc  msg_sent_count               	;to go down one line
	                            mov  sent_char_count, 0           	;to reset character count to write new string
	                            CMP  scroll_counter,11
	                            jne  inc_scroll
	                            mov  scroll_counter,1
	inc_scroll:                 
	                            inc  scroll_counter
	                            call scrolldown_up
								
	                            jmp  end1_2_2
	back_space_2_2_2:           
	                            cmp  sent_char_count ,0
	                            je   end1_2_2
	                            dec  sent_char_count
	                            dec  sent_char_count              	;to delete last character by dec twice as it was incremented due to backspace
	end1_2_2:                   
	                            pop  dx                           	;to empty stack so proc can return to correct code segment
	                            ret
send_msg endp




chatting proc near
						
	;Set Divisor Latch Access Bit
	                            mov  ah,0
	                            mov  al,13H
	                            int  10h
 
	                            mov  ah,0ch
	                            mov  al,0
	                            int  21h                          	;clear buffer before chat starts

	                            mov  ah,2
	                            mov  dx,0
	                            int  10h
								mov ah,09
								mov dx,offset str_esc
								int 21h

	mov  si,@data                     	;moves to si the location in memory of the data segment

	mov  ah,13h                       	;service to print string in graphic mode
	mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	mov  bl,0dh                       	;color of the text (white foreground and black background)
	mov  cx,sent_namechar_count        	;length of string
	mov  dh,1                        	;y coordinate
	mov  dl,0                         	;x coordinate
	mov  es,si                        	;moves to es the location in memory of the data segment
	mov  bp,offset name1              	;mov bp the offset of the string
	int  10h

	mov  si,@data                     	;moves to si the location in memory of the data segment
	mov  ah,13h                       	;service to print string in graphic mode
	mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	mov  bl,0bh                       	;color of the text (white foreground and black background)
	mov  cx,rec_namechar_count        	;length of string
	mov  dh,13                        	;y coordinate
	mov  dl,0                         	;x coordinate
	mov  es,si                        	;moves to es the location in memory of the data segment
	mov  bp,offset name2              	;mov bp the offset of the string
	int  10h

	                            call draw_middle

	loopx:                      

	                            call recmsg
	                            cmp  al,1bh
	                            jne  resume
	                            jmp  end2
	resume:                     
	                            call send_msg
	                            cmp  al,1bh
	                            jne  loopx

	end2:                       

	                            ret
chatting endp

drawground proc near                                          		; draws a line which represents the ground on which the players are playing


	                            mov  cx,0
	                            mov  dx,groundpos
	                            mov  al,02h
	                            mov  ah,0ch
	back111:                    int  10h
	                            inc  cx
	                            cmp  cx,320
	                            jnz  back111

	                            ret
drawground endp

draw_score proc near                                          		;draws the ingame score of each player using int 10h and ah 13h awith cx and dx indicating on screen X and Y positions respectively

	                            mov  si,@data                     	;moves to si the location in memory of the data segment

	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0dh                       	;color of the text (white foreground and black background)
	                            mov  cx,sent_namechar_count       	;length of string
	                            mov  dh,15                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset name1              	;mov bp the offset of the string
	                            int  10h

	                            mov  cx,P1_score_size             	;length of string
	                            mov  dh,15                        	;y coordinate
	                            mov  dl,0
	                            add  dx,sent_namechar_count       	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset p1_score_str       	;mov bp the offset of the string
	                            int  10h


	                            mov  bl,0bh                       	;color of the text (white foreground and black background)
	                            mov  cx,rec_namechar_count        	;length of string
	                            mov  dh,15                        	;y coordinate
	                            mov  dl,16h                       	;x coordinate

	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset name2              	;mov bp the offset of the string
	                            int  10h
	                            mov  bl,0bh                       	;color of the text (white foreground and black background)
	                            mov  cx,P2_score_size             	;length of string
	                            mov  dh,15                        	;y coordinate
	                            mov  dl,16h                       	;x coordinate
	                            add  dx,rec_namechar_count
	                            inc  dl
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset p2_score_str       	;mov bp the offset of the string
	                            int  10h

	                            ret

draw_score endp

draw_ability proc near                                        		;draws time left to be able to activate ability using int 10h, and ah 13h
	                            mov  si,@data                     	;moves to si the location in memory of the data segment

	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0dh                       	;color of the text (white foreground and black background)

	                            mov  cx,p1_ability_size           	;length of string
	                            mov  dh,16                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset p1_ability_str     	;mov bp the offset of the string
	                            int  10h

	                            mov  bl,0bh                       	;color of the text (white foreground and black background)
	                            mov  cx,P2_ability_size           	;length of string
	                            mov  dh,16                        	;y coordinate
	                            mov  dl,16h                       	;x coordinate

	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset p2_ability_str     	;mov bp the offset of the string
	                            int  10h

	                            ret
draw_ability endp

draw_post1 proc near                                          		; draws a straight line from ground to specified height of the goal. the straight line represents the first goal post
	;mov al,13h
	;int 10h
	                            mov  cx,post1pos
	                            mov  dx, groundpos
	                            mov  al,0fh
	                            mov  ah,0ch
	back2:                      int  10h
	                            dec  dx
	                            cmp  dx,woodwork1pos
	                            jnz  back2
	                            ret
draw_post1 endp


draw_post_center proc near                                    		; draws a straight line from ground to specified height of the goal. the straight line represents the first goal post
	;mov al,13h
	;int 10h
	                            mov  cx,center_post_X
	                            mov  dx, groundpos
	                            mov  al,0fh
	                            mov  ah,0ch
	bac:                        int  10h
	                            dec  dx
	                            cmp  dx,center_post_y
	                            jnz  bac
	                            ret
draw_post_center endp

check_collision_centerpostr proc near

	                            mov  ax,center_post_y
	                            sub  ax,5
	                            cmp  ball_ypos,ax
	                            jg   check_center
	                            ret
	check_center:               mov  ax,center_post_X
	                            cmp  ball_x_pos,ax
	                            jge  check_coll
	                            ret
	check_coll:                 mov  ax,center_post_X
	                            add  ax,6
	                            cmp  ball_x_pos,ax
	                            jle  check_direction
	                            ret
	check_direction:            mov  ax,ball_x_speed
	                            cmp  ax,0
	                            jl   collide_right
	                            ret
	collide_right:              mov  ball_x_speed,2

check_collision_centerpostr endp

check_collision_centerpostl proc near

	                            mov  ax,center_post_y
	                            sub  ax,5
	                            cmp  ball_ypos,ax
	                            jg   check_centerl
	                            ret
	check_centerl:              mov  ax,center_post_X
	                            cmp  ball_x_pos,ax
	                            jle  check_coll2
	                            ret
	check_coll2:                mov  ax,center_post_X
	                            sub  ax,10
	                            cmp  ball_x_pos,ax
	                            jge  check_directionl
	                            ret
	check_directionl:           mov  ax,ball_x_speed
	                            cmp  ax,0
	                            jg   collide_left
	                            ret
	collide_left:               mov  ball_x_speed,-2

check_collision_centerpostl endp

check_collision_centerabove proc near

	                            mov  ax, center_post_y
	                            cmp  ball_ypos,ax
	                            jle  collide_above
	                            ret
	collide_above:              mov  ax,center_post_y
	                            sub  ax,10
	                            cmp  ball_ypos ,ax
	                            jge  collision_yaba
	                            ret
	collision_yaba:             mov  ax, ball_x_pos
	                            cmp  ax,center_post_X
	                            je   collide_b2a
	                            ret
	collide_b2a:                mov  ball_y_speed,-5

check_collision_centerabove endp

draw_woodwork1 proc near                                      		; draws a straight line from the top of the goal to the edge of the screen. the straigh line represents the first goal woodwork
	;mov al,13h
	;int 10h
	                            mov  cx,post1pos
	                            mov  dx, woodwork1pos
	                            mov  al,0fh
	                            mov  ah,0ch
	back3:                      int  10h
	                            dec  cx
	                            cmp  cx,0
	                            jnz  back3
	                            ret
draw_woodwork1 endp

draw_woodwork2 proc  near                                     		; draws a straight line from the top of the goal to the edge of the screen. the straigh line represents the second goal woodwork
	;mov al,13h
	;int 10h
	                            mov  cx,post2pos
	                            mov  dx, woodwork2pos
	                            mov  al,0fh
	                            mov  ah,0ch
	back4:                      int  10h
	                            inc  cx
	                            cmp  cx,320
	                            jnz  back4
	                            ret
draw_woodwork2 endp

draw_post2 proc near                                          		; draws a straight line from specified height to ground of the goal. the straight line represents the second goal post
	;mov al,13h
	;int 10h
	                            mov  cx,post2pos
	                            mov  dx, groundpos
	                            mov  al,0fh
	                            mov  ah,0ch
	back5:                      int  10h
	                            dec  dx
	                            cmp  dx,woodwork2pos
	                            jnz  back5
	                            ret
draw_post2 endp

draw_ball proc near                                           		;draws a square representing the ball



	                            mov  cx, ball_x_pos
	                            mov  dx, ball_ypos
	                            mov  al,0fh
	                            mov  ah,0ch


	draw_width:                 mov  al,0fh
	                            mov  ah,0ch
	                            int  10h
	                            inc  cx
	                            mov  ax, cx
	                            sub  ax, ball_x_pos
	                            cmp  ax,ball_size                 	;these lines compares ax which conatains number of pixels draws with ball_size which contains the number of pixels which should be drawn
	;if ax>ball_size donot draw anymore
	                            jng  draw_width

	draw_height:                mov  al,0fh
	                            mov  ah,0ch
	                            int  10h
	                            mov  cx, ball_x_pos
	                            inc  dx
	                            mov  ax, dx
	                            sub  ax, ball_ypos
	                            cmp  ax,ball_size
	                            jng  draw_width
                        


                        

	                            ret
draw_ball endp

	;DELAY 500000 (7A120h).
delay proc
	                            mov  cx, 7                        	;HIGH WORD.
	                            mov  dx, 0A120h                   	;LOW WORD.
	                            mov  ah, 86h                      	;WAIT.
	                            int  15h
	                            ret
delay endp

moving_ball proc near

	                            call deleteball
	moving:                     
	                            mov  ax,ball_x_speed
	                            add  ball_x_pos,ax
	                            mov  ax,screen_boundary
	                            cmp  ball_x_pos,ax
	                            jl   reverse_direction_x

	                            mov  ax,screen_width
	                            sub  ax,ball_size
	                            sub  ax,screen_boundary
	                            cmp  ball_x_pos,ax
	                            jg   reverse_direction_x

	                            mov  ax,ball_y_speed
	                            add  ball_ypos,ax
	                            mov  ax,screen_boundary
	                            cmp  ball_ypos,ax
	                            jl   reverse_direction_y

	                            mov  ax,groundpos
	                            sub  ax,ball_size
    
	                            cmp  ball_ypos,ax
	                            jg   reverse_direction_y

   
   




	collision:                  mov  ax,160
	                            cmp  ball_x_pos,ax
	                            jl   check_collision1

 
	collision2:                 mov  ax,160
	                            cmp  ball_x_pos,ax
	                            jg   check_collision2

	                            ret

    
	reverse_direction_x:        
	                            neg  ball_x_speed
	                            ret

	reverse_direction_y:        
	                            neg  ball_y_speed
    
	                            ret

  
	;   ret
	;   collided_second: mov ball_x_speed,-5
	check_collision1:           mov  ax,woodwork1pos
	                            cmp  ball_ypos,ax
	                            je   check_collision
	                            ret
	check_collision2:           mov  ax,woodwork2pos
	                            cmp  ball_ypos,ax
	                            je   check_collision
	                            ret
	check_collision:            cmp  ball_x_pos,45d
	                            jl   reverse_direction_y
	                            cmp  ball_x_pos,267d
	                            jg   reverse_direction_y
	                            ret

 


	; call draw_ball
moving_ball endp

check_goal proc near

	                            mov  ax,woodwork1pos
	                            add  ax,ball_size
	                            cmp  ball_ypos,ax                 	;check if ball y-position is inside the goal
	                            jg   check_goals
	                            ret
	check_goals:                cmp  ball_x_pos,12h               	; check if the ball x-position is inside the goal
	                            jl   goal_for_player2
	                            cmp  ball_x_pos,300
	                            jg   goal_for_player1
	                            ret
	goal_for_player2:           inc  p2_score                     	;increment the score of the first player
	                            mov  ball_x_pos,160
	                            mov  ball_ypos,50
	                            mov  ball_x_speed,2
	                            mov  ball_y_speed,5
	                            call delay
	                            ret




	goal_for_player1:           inc  p1_score
	                            mov  ball_x_pos,160
	                            mov  ball_ypos,50
	                            mov  ball_x_speed,2
	                            mov  ball_y_speed,5
	                            call delay
 
	                            ret
   
check_goal endp

check_player_collision proc near

	                            mov  ax,imgHmove
	                            cmp  ball_ypos,ax
	                            jg   collide_first
	                            ret
	collide_first:              mov  ax,imgW
	                            sub  ax,22

	                            cmp  ball_x_pos,ax
	                            jle  collide_now
	                            ret
	collide_now:                mov  ax,imgWmove

	                            add  ax,27

	                            cmp  ball_x_pos,ax
	                            jge  coll
	                            ret
	coll:                       mov  ball_x_speed,2
check_player_collision endp

check_player2_collision proc near

	                            mov  ax,img2Hmove
	                            cmp  ball_ypos,ax
	                            jg   collide_second
	                            ret
	collide_second:             mov  ax,img2Wmove
	                            add  ax,ball_size

	                            cmp  ball_x_pos,ax
	                            jge  collide_now2
	                            ret
	collide_now2:               mov  ax,img2W

	                            sub  ax,27

	                            cmp  ball_x_pos,ax
	                            jle  coll2
	                            ret
	coll2:                      mov  ball_x_speed,-2

check_player2_collision endp

check_head proc near

	                            mov  ax,imgHmove
	                            cmp  ball_ypos,ax
	                            je   collide_head
	                            ret
	collide_head:               mov  ax,imgW
	                            sub  ax,18
	                            cmp  ball_x_pos,ax
	                            jle  collide_head_now
	                            ret
	collide_head_now:           mov  ax,imgWmove
	                            add  ax,5
	                            cmp  ball_x_pos,ax
	                            jge  Heado
	                            ret
	Heado:                      mov  ball_y_speed,-5

check_head endp

check_head2 proc near

	                            mov  ax,img2Hmove
	                            cmp  ball_ypos,ax
	                            je   collide_head2
	                            ret
	collide_head2:              mov  ax,img2Wmove
	                            add  ax,18
	                            cmp  ball_x_pos,ax
	                            jge  collide_head_now2
	                            ret
	collide_head_now2:          mov  ax,img2W
	                            sub  ax,22
	                            cmp  ball_x_pos,ax
	                            jle  Heado2
	                            ret
	Heado2:                     mov  ball_y_speed,-5

check_head2 endp

check_player_back proc near

	                            mov  ax,imgHmove
	                            cmp  ball_ypos,ax
	                            jg   collide_firstb
	                            ret
	collide_firstb:             mov  ax,imgWmove
	                            add  ax,12
	                            cmp  ball_x_pos,ax
	                            jge  collide_nowb
	                            ret
	collide_nowb:               mov  ax,imgW

	                            sub  ax,27

	                            cmp  ball_x_pos,ax
	                            jle  collb
	                            ret
	collb:                      mov  ball_x_speed,-2

check_player_back endp

check_player2_back proc near

	                            mov  ax,img2Hmove
	                            cmp  ball_ypos,ax
	                            jg   collide_secondb
	                            ret
	collide_secondb:            mov  ax,img2W
	                            sub  ax,22
	                            cmp  ball_x_pos,ax
	                            jle  collide_nowb2
	                            ret
	collide_nowb2:              mov  ax,img2Wmove

	                            add  ax,27

	                            cmp  ball_x_pos,ax
	                            jge  collb2
	                            ret
	collb2:                     mov  ball_x_speed,2

check_player2_back endp


check_ability1 proc near
	                            cmp  p1_ablity,"0"
	                            je   c1_end
	                            mov  di, offset p1_ablity
	                            dec  [di]
	                            ret
	c1_end:                     
	                            mov  isability1_available,1
	                            ret
check_ability1 endp

check_ability2 proc near
	                            cmp  p2_ablity,"0"
	                            je   c2_end
	                            mov  di,offset p2_ablity
	                            dec  [di]
	                            ret
	c2_end:                     
	                            mov  isability2_available,1
	                            ret
check_ability2 endp
 
drawplayer1 proc near

	;mov ax, 4F02h    ;
	;mov bx, 0100h    ; 640x400 screen graphics mode
	;mov ah,00h
	;mov al,13h
	;INT 10h      	;execute the configuration
	;MOV AH,0Bh   	;set the configuration
	                            MOV  CX, imgW                     	;set the width (X) up to 64 (based on image resolution)
	                            MOV  DX, imgH                     	;set the height (Y) up to 64 (based on image resolution)
	                            mov  DI, offset img               	; to iterate over the pixels
	                            jmp  Start                        	;Avoid drawing before the calculations
	Drawit:                     
	                            MOV  AH,0Ch                       	;set the configuration to writing a pixel
	                            mov  al, [DI]                     	; color of the current coordinates
	                            MOV  BH,00h                       	;set the page number
	                            cmp  al,0
	                            je   Start
	                            INT  10h                          	;execute the configuration
	Start:                      
	                            inc  DI
	                            DEC  Cx                           	;  loop iteration in x direction
	                            cmp  cx,imgWmove
	                            JNE  Drawit                       	;  check if we can draw current x and y and escape the y iteration
	                            mov  Cx, imgW                     	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                            DEC  DX                           	;  loop iteration in y direction
	                            cmp  dx,imgHmove
	                            JE   ENDING
	                            Jmp  Drawit
	ENDING:                     
	                            ret
drawplayer1 endp

deleteplayer1 proc near                                       		;it performs the same function as drawplayer1 but it draws black colour instead of the player to delete it.
	;mov ax, 4F02h    ;
	;mov bx, 0100h    ; 640x400 screen graphics mode
	;mov ah,00h
	;mov al,13h
	;INT 10h      	;execute the configuration
	;MOV AH,0Bh   	;set the configuration
	                            MOV  CX, imgW                     	;set the width (X) up to 64 (based on image resolution)
	                            MOV  DX, imgH                     	;set the height (Y) up to 64 (based on image resolution)
	                            mov  DI, offset img               	; to iterate over the pixels
	                            jmp  Startdelete                  	;Avoid deleting before the calculations
	Deleteit:                   
	                            MOV  AH,0Ch                       	;set the configuration to writing a pixel
	                            mov  al, 00h                      	; color of the current coordinates
	                            MOV  BH,00h                       	;set the page number
	                            INT  10h                          	;execute the configuration
	Startdelete:                
	                            inc  DI
	                            DEC  Cx                           	;  loop iteration in x direction
	                            cmp  cx,imgWmove
	                            JNE  Deleteit                     	;  check if we can delete current x and y and escape the y iteration
	                            mov  Cx, imgW                     	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                            DEC  DX                           	;  loop iteration in y direction
	                            cmp  dx,imgHmove
	                            JE   ENDINGDelete
	                            Jmp  Deleteit
	ENDINGDelete:               
	                            ret
deleteplayer1 endp


drawplayer2 proc near

	; mov ax, 4F02h    ;
	;mov bx, 0100h    ; 640x400 screen graphics mode
	;mov ah,00h
	;mov al,13h
	;INT 10h      	;execute the configuration
	;MOV AH,0Bh   	;set the configuration
	                            MOV  CX, img2W                    	;set the width (X) up to 64 (based on image resolution)
	                            MOV  DX, img2H                    	;set the height (Y) up to 64 (based on image resolution)
	                            mov  DI, offset img2              	; to iterate over the pixels
	                            jmp  Start2                       	;Avoid drawing before the calculations
	Drawit2:                    
	                            MOV  AH,0Ch                       	;set the configuration to writing a pixel
	                            mov  al, [DI]                     	; color of the current coordinates
	                            MOV  BH,00h                       	;set the page number
	                            cmp  al,0
	                            je   Start2
	                            INT  10h                          	;execute the configuration
	Start2:                     
	                            inc  DI
	                            DEC  Cx                           	;  loop iteration in x direction
	                            cmp  cx,img2Wmove
	                            JNE  Drawit2                      	;  check if we can draw current x and y and escape the y iteration
	                            mov  Cx, img2W                    	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                            DEC  DX                           	;  loop iteration in y direction
	                            cmp  dx,img2Hmove
	                            JE   ENDING2
	                            Jmp  Drawit2

	ENDING2:                    
	                            ret
drawplayer2 endp

deleteplayer2 proc near                                       		;it performs the same function as drawplayer1 but it draws black colour instead of the player to delete it.
	;mov ax, 4F02h    ;
	;mov bx, 0100h    ; 640x400 screen graphics mode
	;mov ah,00h
	;mov al,13h
	;INT 10h      	;execute the configuration
	;MOV AH,0Bh   	;set the configuration
	                            MOV  CX, img2W                    	;set the width (X) up to 64 (based on image resolution)
	                            MOV  DX, img2H                    	;set the height (Y) up to 64 (based on image resolution)
	                            mov  DI, offset img               	; to iterate over the pixels
	                            jmp  Startdelete2                 	;Avoid deleting before the calculations
	Deleteit2:                  
	                            MOV  AH,0Ch                       	;set the configuration to writing a pixel
	                            mov  al, 00h                      	; color of the current coordinates
	                            MOV  BH,00h                       	;set the page number
	                            INT  10h                          	;execute the configuration
	Startdelete2:               
	                            inc  DI
	                            DEC  Cx                           	;  loop iteration in x direction
	                            cmp  cx,img2Wmove
	                            JNE  Deleteit2                    	;  check if we can delete current x and y and escape the y iteration
	                            mov  Cx, img2W                    	;  if loop iteration in y direction, then x should start over so that we sweep the grid
	                            DEC  DX                           	;  loop iteration in y direction
	                            cmp  dx,img2Hmove
	                            JE   ENDINGDelete2
	                            Jmp  Deleteit2
	ENDINGDelete2:              
	                            ret
deleteplayer2 endp

MovePlayerCOM1 proc near

	getkey:                     

	;Check that Transmitter Holding Register is Empty
	                            mov  dx , 3FDH                    	; Line Status Register
	AGAIN300:                   In   al , dx                      	;Read Line Status
	                            test al , 00100000b
	                            JZ   AGAIN300                     	;Not empty

	;If empty put the VALUE in Transmit data register
	                            mov  dx , 3F8H                    	; Transmit data registe
		
	; getinput:
	; mov ah,0bh
	; int 21h
	; cmp al,0
	; je Exit1
	; cmp al,65
	; jl continue1
	; mov in_game_sent_charc , al
	continue1:                  
	                            mov  ah,01h
	                            int  16h
	                            JZ   Exit_Movement
	                            mov  sent_char,al

	endgame:                    
	                            cmp  ah,66
	                            jne  check_p1_ability
	                            mov  is_game_over,1               	; if user pressed F8  end the current game
	check_p1_ability:           
	                            cmp  ah,80d                       	;if it is space activate ability if it is not check for other keys
	                            jne  move
	                            call activate_ability1
	                            mov  al,ah
	                            out  dx , al

	                            jmp  Exit_Movement

	;check_2nd_ability:
	;cmp  ah,28                        	;if it is enter activate ability if it isnot check for other keys
	;jne  move
	;call activate_ability2
	;jmp  exit1

	move:                       

	                            cmp  ah,72d
	                            JE   move_player1_up
								

	                            cmp  ah,77d
	                            JE   move_player1_right

	                            cmp  ah,75d
	                            JE   move_player1_left
								




	Exit1:                      
	                            out  dx,al
	                            call print_in_game_msg            	;if key pressed is not an arrow then we print it as an in-game chat message
	                            jmp  Exit_Movement

	move_player1_up:            
	                            mov  al,ah
	                            out  dx , al
	                            cmp  isplayer1_frozen,1           	;check for the freeze other player ability if it is activated then the player can't move.
	                            je   Exit_Movement
	                            cmp  imgH,99                      	; if the player is already up then he can't jump further
	                            jle  Exit_Movement
	                            call deleteplayer1                	; this deletes the old player to draw it in its new position
	                            mov  ax,PlayerJump                	; this adds the distance he moves to his current position
	                            sub  imgH,ax
	                            sub  imgHmove,ax
	                            call drawplayer1                  	; to draw the new player in its new position after we calculate it.




	move_player1_right:         
	                            mov  al,ah
	                            out  dx , al
	                            cmp  isplayer1_frozen,1           	; check for the freeze other player ability if it is activated then the player can't move.
	                            je   Exit_Movement
	                            call deleteplayer1                	; this deletes the old player to draw it in its new position
	                            mov  ax,PlayerVelocity            	; this adds the distance he moves to his current position
	                            add  imgW,ax
	                            add  imgWmove,ax
	                            cmp  imgW,160d                    	; this checks that the player didn't pass the centre of the playground.
	                            jge  player1_after_centre
	                            call drawplayer1                  	; to draw the new player in its new position after we calculate it.
	                            jmp  Exit_Movement




	move_player1_left:          
	                            mov  al,ah
	                            out  dx , al
	                            cmp  isplayer1_frozen,1           	;check for the freeze other player ability if it is activated then the player can't move.
	                            je   Exit_Movement
	                            call deleteplayer1                	; this deletes the old player to draw it in its new position
	                            mov  ax,PlayerVelocity            	; this adds the distance he moves to his current position
	                            sub  imgW,ax
	                            sub  imgWmove,ax
	                            cmp  imgW,48                      	; this checks that the player didn't exceed the end of the screen.
	                            jb   player1_reverse
	                            call drawplayer1                  	; to draw the new player in its new position after we calculate it.
	                            jmp  Exit_Movement

	player1_after_centre:       
	                            sub  imgW,ax                      	; if the player exceeds the centre of the playground we draw him in his same position to prevent him from exceeding it.
	                            sub  imgWmove,ax
	                            call drawplayer1
	                            jmp  Exit_Movement



	player1_reverse:            
	                            add  imgW,ax                      	; if the player exceeds the end of the screen we draw him in his same position to prevent him from exceeding it.
	                            add  imgWmove,ax
	                            call drawplayer1
	                            jmp  Exit_Movement





	Exit_Movement:              
	                            mov  ah,0ch
	                            mov  al,0h
	                            int  21h
	                            ret
MovePlayerCOM1 endp


MovePlayerCOM2 proc near
	;Check that Data is Ready
	                            mov  dx , 3FDH                    	; Line Status Register
	CHK300:                     in   al , dx
	                            test al , 1
	                            JZ   ExitMove2                    	;Not Ready
	;If Ready read the VALUE in Receive data register
	                            mov  dx , 03F8H
	                            in   al , dx
	                            mov  rec_char,al
	                            mov  ah,al
	                            call rec_msg_in_game
	endgame2:                   
	                            cmp  ah,66
	                            jne  check_p2_ability
	                            mov  is_game_over,1               	; if user pressed F8  end the current game
							
	check_p2_ability:           
	                            cmp  ah,80d                       	;if it is space activate ability if it is not check for other keys
	                            jne  move2
	                            call activate_ability2
	                            jmp  ExitMove2
	move2:                      
	                            cmp  ah,72d
	                            je   move_player2_up
	                            cmp  ah,77d
	                            JE   move_player2_left
	                            cmp  ah,75d
	                            je   move_player2_right
	                            jmp  ExitMove2
	move_player2_up:            
	                            cmp  isplayer2_frozen,1           	;check for the freeze other player ability if it is activated then the player can't move.
	                            je   ExitMove2
	                            cmp  img2H,99                     	; if the player is already up then he can't jump further
	                            jle  ExitMove2
	                            call deleteplayer2                	; this deletes the old player to draw it in its new position
	                            mov  ax,PlayerJump                	; this adds the distance he moves to his current position
	                            sub  img2H,ax
	                            sub  img2Hmove,ax
	                            call drawplayer2                  	; to draw the new player in its new position after we calculate it.
	                            jmp  ExitMove2
	move_player2_right:         
	                            cmp  isplayer2_frozen,1           	;check for the freeze other player ability if it is activated then the player can't move.
	                            je   ExitMove2
	                            call deleteplayer2                	; this deletes the old player to draw it in its new position
	                            mov  ax,PlayerVelocity            	; this adds the distance he moves to his current position
	                            add  img2W,ax
	                            add  img2Wmove,ax
	                            cmp  img2W,340                    	; this checks that the player didn't exceed the end of the screen.
	                            jg   player2_reverse
	                            call drawplayer2                  	; to draw the new player in its new position after we calculate it.
	                            jmp  ExitMove2
	move_player2_left:          
	                            cmp  isplayer2_frozen,1           	;check for the freeze other player ability if it is activated then the player can't move.
	                            je   ExitMove2
	                            call deleteplayer2                	; this deletes the old player to draw it in its new position
	                            mov  ax,PlayerVelocity            	; this adds the distance he moves to his current position
	                            sub  img2W,ax
	                            sub  img2Wmove,ax
	                            cmp  img2Wmove,160d               	; this checks that the player didn't pass the centre of the playground.
	                            jle  player2_after_centre
	                            call drawplayer2                  	; to draw the new player in its new position after we calculate it.
	                            jmp  ExitMove2

	player2_after_centre:                                         	; if the player exceeds the centre of the playground we draw him in his same position to prevent him from exceeding it.
	                            add  img2W,ax
	                            add  img2Wmove,ax
	                            call drawplayer2
	                            jmp  ExitMove2
	player2_reverse:                                              	; if the player exceeds the end of the screen we draw him in his same position to prevent him from exceeding it.
	                            sub  img2W,ax
	                            sub  img2Wmove,ax
	                            call drawplayer2
	                            jmp  Exit_Movement
	ExitMove2:                  
	                            mov  ah,0ch
	                            mov  al,0h
	                            int  21h
	                            ret
MovePlayerCOM2 endp
MovePlayer1Down proc near                                     		; it moves the player down after jumping after a certain time when he jumps.
	                            call deleteplayer1
	                            mov  imgH,114
	                            mov  imgHmove,50
	                            call drawplayer1
	                            ret
MovePlayer1Down endp


MovePlayer2Down proc near                                     		; it moves the player down after jumping after a certain time when he jumps.
	                            call deleteplayer2
	                            mov  img2H,114
	                            mov  img2Hmove,50
	                            call drawplayer1
	                            ret
MovePlayer2Down endp

deleteball proc near                                          		;deletes old position of  ball by drawing black pixels over it
	                            mov  cx, ball_x_pos
	                            mov  dx, ball_ypos
	                            mov  al,01h
	                            mov  ah,0ch


	draw_width1:                mov  al,00h
	                            mov  ah,0ch
	                            int  10h
	                            inc  cx
	                            mov  ax, cx
	                            sub  ax, ball_x_pos
	                            cmp  ax,ball_size
	                            jng  draw_width1

	draw_height1:               mov  al,00h
	                            mov  ah,0ch
	                            int  10h
	                            mov  cx, ball_x_pos
	                            inc  dx
	                            mov  ax, dx
	                            sub  ax, ball_ypos
	                            cmp  ax,ball_size
	                            jng  draw_width1

	                            ret
deleteball endp

									
ability_time proc near                                        		;draws "Time of ability:(time) " in the required position on screen

	                            mov  si,@data                     	;moves to si the location in memory of the data segment

	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0dh                       	;color of the text (white foreground and black background)

	                            mov  cx,ability_time_size         	;length of string
	                            mov  dh,17                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset ability_time_str   	;mov bp the offset of the string
	                            int  10h

	                            mov  bl,0bh                       	;color of the text (white foreground and black background)
	                            mov  cx,ability_time_size2        	;length of string
	                            mov  dh,17                        	;y coordinate
	                            mov  dl,16h                       	;x coordinate

	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset ability_time_str2  	;mov bp the offset of the string
	                            int  10h

	                            ret
ability_time endp


dec_ability_time1 proc near                                   		;This proc is called every one second to decrease the time left of ability. When it reaches zero it doesnot decrement
	;when it reaches zero it resets the time left to activate ability and resets the time of ability
	;It also returns goal size to normal and make the player able to move again

	                            mov  di, offset real_ability_time1
	                            cmp  real_ability_time1,"0"
	                            je   c11_end
	                            dec  [di]
	                            ret

	c11_end:                    
	                            push bx
	                            mov  bl,ability_time1
	                            mov  [di], bl
	                            pop  bx
	                            mov  p1_ablity,"9"
	                            mov  isability1_active,0

	                            cmp  p1_ability_type, "1"
	                            jne  cmp_2
	                            cmp  p2_ability_type, "2"         	;if ability decrease size of goal 1 and ability2 increase size of goal 1 check that ability 2 isnot active
	                            jne  deletegoal11
	                            cmp  isability2_active,1
	                            je   end_this                     	; if active donot return to normal
	deletegoal11:               
	                            call delete_oldgoal1
	                            mov  woodwork1pos, 40
	                            ret

	cmp_2:                      cmp  p1_ability_type, "2"
	                            jne  cmp_3
	                            cmp  p2_ability_type, "1"         	;if ability increase size of goal 2 and ability1 decrease size of goal 2 check that ability 2 isnot active
	                            jne  deletegoal21
	                            cmp  isability2_active,1
	                            je   end_this                     	; if active donot return to normal
	deletegoal21:               
	                            call delete_oldgoal2
	                            mov  woodwork2pos, 40
	                            ret

	cmp_3:                      cmp  p1_ability_type, "3"
	                            jne  end_this
	                            mov  isplayer2_frozen, 0

	end_this:                   
	                            ret
dec_ability_time1 endp



dec_ability_time2 proc near                                   		;Does the same as dec_ability_time1 but with player 2

	                            mov  di,offset real_ability_time2
	                            cmp  real_ability_time2,"0"
	                            je   c22_end
	                            dec  [di]
	                            ret

	c22_end:                    
	                            push bx
	                            mov  bl,ability_time2
	                            mov  [di], bl
	                            pop  bx
	                            mov  p2_ablity,"9"
	                            mov  isability2_active,0

	                            cmp  p2_ability_type, "1"         	; if ability doesnot decrease size of goal 2 compare with other abilities
	                            jne  cmp_22
	                            cmp  p1_ability_type, "2"         	; if ability decrease size of goal 2 and ability1 increase size of goal 2 check that ability 1 isnot active
	                            jne  deletegoal22                 	; if active donot return to normal
	                            cmp  isability1_active,1
	                            je   endthis1

	deletegoal22:               
	                            call delete_oldgoal2
	                            mov  woodwork2pos, 40
	                            ret

	cmp_22:                     cmp  p2_ability_type, "2"
	                            jne  cmp_33
	                            cmp  p1_ability_type, "1"         	;if ability increase size of goal 1 and ability1 decrease size of goal 1 check that ability 1 isnot active
	                            jne  deletegoal12                 	; if active donot return to normal
	                            cmp  isability1_active,1
	                            je   endthis1

	deletegoal12:               
	                            call delete_oldgoal1
	                            mov  woodwork1pos, 40
	                            ret

	cmp_33:                     cmp  p2_ability_type, "3"
	                            jne  endthis1
	                            mov  isplayer1_frozen, 0

	endthis1:                   
	                            ret
dec_ability_time2 endp



activate_ability1 proc near                                   		;First check if ability is available, then if it is check which ability did the user choose, then activate the ability

	                            cmp  isability1_available,1
	                            jne  end_proc
	                            mov  isability1_active, 1

	                            cmp  p1_ability_type, "1"
	                            jne  cmp_221
	                            call delete_oldgoal1
	                            mov  woodwork1pos,55              	;decrease size of goal
	                            ret

	cmp_221:                    cmp  p1_ability_type, "2"
	                            jne  cmp_331
	                            call delete_oldgoal2
	                            mov  woodwork2pos, 30             	;increase size p2 goal

	                            ret

	cmp_331:                    cmp  p1_ability_type, "3"
	                            jne  end_proc
	                            mov  isplayer2_frozen, 1          	;freeze player 1

	end_proc:                   

	                            ret
activate_ability1 endp


activate_ability2 proc near                                   		;does the same as activate_ability1 but for player 2

	                            cmp  isability2_available,1
	                            jne  end_proc1
	                            mov  isability2_active, 1

	                            cmp  p2_ability_type, "1"
	                            jne  cmp_2211
	                            call delete_oldgoal2
	                            mov  woodwork2pos,55
	                            ret

	cmp_2211:                   cmp  p2_ability_type, "2"
	                            jne  cmp_3311
	                            call delete_oldgoal1
	                            mov  woodwork1pos, 30

	                            ret

	cmp_3311:                   cmp  p2_ability_type, "3"
	                            jne  end_proc1
	                            mov  isplayer1_frozen, 1

	end_proc1:                  

	                            ret
activate_ability2 endp

delete_oldgoal1 proc near                                     		; deletes old position of woodwork after activating ability or after ability ends by drawing black pixels in old posotion
	                            mov  cx,post1pos
	                            mov  dx, woodwork1pos
	                            mov  al,00h
	                            mov  ah,0ch
	back31:                     int  10h
	                            dec  cx
	                            cmp  cx,0
	                            jnz  back31
	                            mov  cx,post1pos
	                            mov  dx, groundpos
	                            mov  al,00h
	                            mov  ah,0ch
	back21:                     int  10h
	                            dec  dx
	                            cmp  dx,woodwork1pos
	                            jnz  back21
	                            ret
delete_oldgoal1 endp

delete_oldgoal2 proc near                                     		; deletes old position of woodwork after activating ability or after ability ends by drawing black pixels in old posotion
	                            mov  cx,post2pos
	                            mov  dx, woodwork2pos
	                            mov  al,00h
	                            mov  ah,0ch
	back311:                    int  10h
	                            inc  cx
	                            cmp  cx,320
	                            jnz  back311
	                            mov  cx,post2pos
	                            mov  dx, groundpos
	                            mov  al,00h
	                            mov  ah,0ch
	back211:                    int  10h
	                            dec  dx
	                            cmp  dx,woodwork2pos
	                            jnz  back211
	                            ret
delete_oldgoal2 endp

draw_background proc near                                     		;draws background with specified colour in required position
	                            mov  cx,0
	                            mov  dx,0
	                            mov  al,0bh
	                            mov  ah,0ch
	backleft:                   int  10h
	                            inc  cx
	                            cmp  cx,320
	                            jnz  backleft
	                            mov  cx,0
	                            inc  dx
	                            cmp  dx,39
	                            jnz  backleft
	                            ret
draw_background endp


end_game proc near                                            		;checks if one player scored 9 goals, time has run out, or someone pressed F8 so that the game ends
        

	comp_scores:                
	                            cmp  p1_score,"9"
	                            je   game_over
	                            cmp  p2_score, "9"
	                            je   game_over
	                            ret

	game_over:                  
	                            mov  is_game_over,1

	                            ret
end_game endp

draw_end_screen proc near                                     		;draws the game ending screen. dispalys scores of players

	                            mov  ah,0                         	; to clear the screen from game graphics
	                            mov  al,13h
	                            int  10h

	;first it draws "Game Over on the screen"
	                            mov  si,@data                     	;moves to si the location in memory of the data segment
	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0fh                       	;color of the text (white foreground and black background)

	                            mov  cl,game_over_str_size        	;length of string
	                            mov  ch,0
	                            mov  dh,5                         	;y coordinate
	                            mov  dl,5                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset game_over_str      	;mov bp the offset of the string
	                            int  10h
	; Second it draws the score of the players using the same logic as "draw_score" but with different X and Y positions
	                            mov  si,@data                     	;moves to si the location in memory of the data segment
	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0dh                       	;color of the text (white foreground and black background)

	                            mov  cx,sent_namechar_count       	;length of string
	                            mov  ch,0
	                            mov  dh,15                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset name1              	;mov bp the offset of the string
	                            int  10h

	                            mov  cx,P1_score_size             	;length of string
	                            mov  dh,15                        	;y coordinate
	                            add  dx,sent_namechar_count       	;x coordinate  ; to write after name of p1
	                            inc  dl
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset p1_score_str       	;mov bp the offset of the string
	                            int  10h

	                            mov  cx,rec_namechar_count        	;length of string
	                            mov  bl,0bh                       	;color of the text (white foreground and black background)
	                            mov  ch,0
	                            mov  dh,17                        	;y coordinate
	                            mov  dl,0h                        	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset name2              	;mov bp the offset of the string
	                            int  10h

	                            mov  bl,0bh                       	;color of the text (white foreground and black background)
	                            mov  cx,P2_score_size             	;length of string
	                            mov  dh,17                        	;y coordinate
	                            add  dx, rec_namechar_count       	;to write after name of player 2
	                            inc  dl

	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset p2_score_str       	;mov bp the offset of the string
	                            int  10h

	;Last it draws "To Return to Main Menu press F8"

	                            mov  si,@data                     	;moves to si the location in memory of the data segment
	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0fh                       	;color of the text (white foreground and black background)

	                            mov  cl,return_menu_str_size      	;length of string
	                            mov  ch,0
	                            mov  dh,10                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset return_menu_str    	;mov bp the offset of the string
	                            int  10h

	;to take input from User
	                            mov  ah,0
	                            int  16h

	                            ret
draw_end_screen endp

draw_end_game proc near                                       		;draws "To end the game press F8 " on game screen
	                        
	                            mov  si,@data                     	;moves to si the location in memory of the data segment
	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0fh                       	;color of the text (white foreground and black background)

	                            mov  cl,game_end_size             	;length of string
	                            mov  ch,0
	                            mov  dh,18                        	;y coordinate
	                            mov  dl,8                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset game_end_str       	;mov bp the offset of the string
	                            int  10h

	                            ret
draw_end_game endp


send_gameinvite proc near                                     		;send invite to p2
	                            mov  dx , 3FDH                    	; Line Status Register
	AGAIN200:                   In   al , dx                      	;Read Line Status
	                            test al , 00100000b
	                            JZ   AGAIN200                     	;Not empty
	;If empty put the VALUE in Transmit data register
	                            mov  dx , 3F8H                    	; Transmit data register
	                            mov  al, 68d
	                            out  dx , al


	                            ret
send_gameinvite endp


wait_gameaccept proc near                                     		;waits for p2 to accept invite
	loop100:                    
	                            mov  dx , 3FDH                    	; Line Status Register
	CHK100:                     in   al , dx
	                            test al , 1
	                            JZ   chk100                       	;Not Ready
	;If Ready read the VALUE in Receive data register
  		
	                            mov  dx , 03F8H
	                            in   al , dx
	                            cmp  al, 67d                      	;if received chat invite while waiting game accept
	                            je   end100
	                            cmp  al,68d
	                            je   end100
	                            jmp  loop100


	end100:                     
	                            ret
wait_gameaccept endp





send_chat_invite proc near                                    		;send chat invite to p2
	                            mov  dx , 3FDH                    	; Line Status Register
	AGAIN2000:                  In   al , dx                      	;Read Line Status
	                            test al , 00100000b
	                            JZ   AGAIN2000                    	;Not empty
	;If empty put the VALUE in Transmit data register
	                            mov  dx , 3F8H                    	; Transmit data register
	                            mov  al, 67d
	                            out  dx , al

	                            ret
send_chat_invite endp

wait_chat_accept proc near                                    		;waits for p2 to accept chat invite
	loop1200:                   
	                            mov  dx , 3FDH                    	; Line Status Register
	CHK1200:                    in   al , dx
	                            test al , 1
	                            JZ   chk1200                      	;Not Ready
	;If Ready read the VALUE in Receive data register
  		
	                            mov  dx , 03F8H
	                            in   al , dx
	                            cmp  al,68d                       	;if received game invite while waiting chat accept
	                            je   end1200
	                            cmp  al,67d
	                            je   end1200
	                            jmp  loop1200


	end1200:                    
	                            ret
wait_chat_accept endp

rec_invite proc near                                          		;used to receive chat invite from p2
	loop1221:                   
	                            mov  dx , 3FDH                    	; Line Status Register
	CHK1221:                    in   al , dx
	                            test al , 1
	                            JZ   end1221                      	;Not Ready
	;If Ready read the VALUE in Receive data register
	                            mov  si,@data                     	;moves to si the location in memory of the data segment

	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0bh                       	;color of the text (white foreground and black background)
	                            mov  cx,rec_namechar_count        	;length of string
	                            mov  dh,12                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset name2              	;mov bp the offset of the string
	                            int  10h
	                            mov  dx , 03F8H
	                            in   al , dx
	                            cmp  al,67d
	                            jne  game_inv
	                            mov  ah,2
	                            mov  dl,0
	                            mov  dh, 12
	                            add  dx,rec_namechar_count
	                            int  10h
	                            mov  ah,9
	                            mov  dx,offset chat_invite2
	                            int  21h
	                            mov  is_chatinv_rec, 1
	                            jmp  end1221
	game_inv:                   
	                            cmp  al,68d
	                            jne  end1221
	                            mov  ah,2
	                            mov  dl,0
	                            mov  dh, 12
	                            add  dx,rec_namechar_count
	                            int  10h
	                            mov  ah,9
	                            mov  dx,offset game_invite2
	                            int  21h
	                            mov  is_game_rec, 1




	end1221:                    
	                            ret
rec_invite endp

selectlevels proc near
	                            mov  ah,0
	                            mov  al,12h
	                            int  10h
	                            mov  ah,9h
	                            mov  dx,offset str_select_levels
	                            int  21h
	choose:                     
	                            mov  ah,0
	                            int  16h
	                            cmp  al,"1"
	                            je   endselect
	                            cmp  al,"2"
	                            jne  choose
	endselect:                  
	                            mov  select_levels,al
	;Check that Transmitter Holding Register is Empty
	                            mov  dx , 3FDH                    	; Line Status Register
	AGAIN3000:                  In   al , dx                      	;Read Line Status
	                            test al , 00100000b
	                            JZ   AGAIN3000                    	;Not empty

	;If empty put the VALUE in Transmit data register
	                            mov  dx , 3F8H                    	; Transmit data registe
	                            mov  al,select_levels
	                            out  dx,al
	                            ret
selectlevels endp

rec_level proc near
	;Check that Data is Ready
	                            mov  dx , 3FDH                    	; Line Status Register
	CHK500:                     in   al , dx
	                            test al , 1
	                            JZ   CHK500                       	;Not Ready
	;If Ready read the VALUE in Receive data register
	                            mov  dx , 03F8H
	                            in   al , dx
	                            mov  select_levels,al
	                            ret
rec_level endp

MAIN PROC FAR
	                            mov  ax,@data
	                            mov  ds,ax


	                            mov  dx,3fbh                      	; Line Control Register
	                            mov  al,10000000b                 	;Set Divisor Latch Access Bit
	                            out  dx,al                        	;Out it
	;Set LSB byte of the Baud Rate Divisor Latch register.
	                            mov  dx,3f8h
	                            mov  al,0ch
	                            out  dx,al
	;Set MSB byte of the Baud Rate Divisor Latch register.
	                            mov  dx,3f9h
	                            mov  al,00h
	                            out  dx,al
	;Set port configuration
	                            mov  dx,3fbh
	                            mov  al,00011011b
	;0:Access to Receiver buffer, Transmitter buffer
	;0:Set Break disabled
	;011:Even Parity
	;0:One Stop Bit
	;11:8bits
	                            out  dx,al


	                            mov  ah,2ch
	                            int  21h
	                            mov  time_change2,dh              	;get time to use it in ability time


	                            call input_name
	menu:                       
	                            call main_menu
	menu_mid:                   
	                            call rec_invite
	                            mov  ah,1
	                            int  16h
	                            jz   menu_mid
	                            cmp  ah,68d                       	;if F10 go to game
	                            jz   game
	                            cmp  ah,67d                       	;if F9 go to chat
	                            JE   CHAT
	                            jMP  menu_mid                     	;else do nothing

	received_game_while_chat:   
	                            mov  si,@data                     	;moves to si the location in memory of the data segment

	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0bh                       	;color of the text (white foreground and black background)
	                            mov  cx,rec_namechar_count        	;length of string
	                            mov  dh,11                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset name2              	;mov bp the offset of the string
	                            int  10h
	                            mov  ah,2
	                            mov  dl,0
	                            mov  dh,11
	                            add  dx,rec_namechar_count
	                            int  10h
	                            mov  ah,9
	                            mov  dx,offset game_invite2
	                            int  21h
	                            mov  is_game_rec, 1

	                            mov  ah,0ch
	                            mov  al,0
	                            int  21h                          	;to clear buffer

	                            jmp  menu_mid

	received_chat_while_game:   
	                            mov  si,@data                     	;moves to si the location in memory of the data segment

	                            mov  ah,13h                       	;service to print string in graphic mode
	                            mov  al,0                         	;sub-service 0 all the characters will be in the same color(bl) and cursor position is not updated after the string is written
	                            mov  bl,0bh                       	;color of the text (white foreground and black background)
	                            mov  cx,rec_namechar_count        	;length of string
	                            mov  dh,12                        	;y coordinate
	                            mov  dl,0                         	;x coordinate
	                            mov  es,si                        	;moves to es the location in memory of the data segment
	                            mov  bp,offset name2              	;mov bp the offset of the string
	                            int  10h
	                            mov  ah,2
	                            mov  dl,0
	                            mov  dh,12
	                            add  dx,rec_namechar_count
	                            int  10h

	                            mov  ah,9
	                            mov  dx,offset chat_invite2
	                            int  21h
	                            mov  is_chatinv_rec, 1

	                            mov  ah,0ch
	                            mov  al,0
	                            int  21h                          	;to clear buffer

	                            jmp  menu_mid


	CHAT:                       
	                            mov  ah,2
	                            mov  dl,0
	                            mov  dh, 10
	                            int  10h

	                            mov  ah,9
	                            mov  dx,offset chat_invite
	                            int  21h

	                            call send_chat_invite
	                            cmp  is_chatinv_rec,1
	                            je   skip_chat_wait
	                            call wait_chat_accept
	                            cmp  al,68d
	                            je   received_game_while_chat
	skip_chat_wait:             
	                            CALL CHATTING
	                            cmp  al,1bh                       	;if esc go to menu
	                            je   menu

	game:                       

	                            mov  ah,2
	                            mov  dl,0
	                            mov  dh, 10
	                            int  10h

	                            mov  ah,9
	                            mov  dx,offset game_invite
	                            int  21h

	                            call send_gameinvite
	                            cmp  is_game_rec,1
	                            je   skip_wait                    	;if accept game invite dont wait
	                            call wait_gameaccept
	                            cmp  al,67d
	                            je   received_chat_while_game
							
	skip_wait:                  
	                            cmp  is_game_rec,0
	                            jne  reclevel
	                            call selectlevels
	                            jmp  ab_choose
	reclevel:                   
	                            call rec_level
	ab_choose:                  
	                            call choose_ability
	                            mov  ah,0
	                            mov  al,13h
	                            int  10h
	check_time:                 
	                            mov  ah,2ch
	                            int  21h
    

	                            cmp  dl,time_change
	                            je   check_time

	                            mov  time_change,dl
    

	;mov ah,00h
	;mov al,13h  ;to clear screen each time step so the old ball position is cleared
	;int 10h
	                            push dx                           	;to store time as drawing operation overwrites data in dx
	;call draw_background
	                            call drawground
	                            call draw_post1
	                            cmp  select_levels,"1"
	                            je   esc_post_center
	                            call draw_post_center
	esc_post_center:            
	                            call draw_woodwork1
	                            call draw_woodwork2
	                            call draw_post2
	                            call draw_ball
	                            call drawplayer1
	                            call drawplayer2
	                            call MovePlayerCOM1
	                            call MovePlayerCOM2
								


	                            cmp  select_levels,"1"
	                            je   esc_post_center1
	                            call check_collision_centerpostr
	                            call check_collision_centerpostl
	                            call check_collision_centerabove
	esc_post_center1:           
	                            call check_head
	                            call check_head2
	                            call check_player_back
	                            call check_player2_back
	                            call check_player_collision
	                            call check_player2_collision
	                            call moving_ball
	                            call check_goal
	                            jmp  score_draw                   	;unconditional jump to avoid the intemediate jump

	menu_intermediate:          jmp  menu                         	;intermidiate jump to label menu

	score_draw:                 
	                            call draw_score
	                            call draw_ability
	                            call ability_time
	                            call draw_end_game
	                            pop  dx                           	;to get stored  time
	                            cmp  dh,time_change2              	;if time has changed then call procedures which change time remaining to activate ability and time left of ability
	                            je   check_time
	;dec game_time_value ;decreases game time each second
	                            call check_ability1
	                            call check_ability2
	                            cmp  isability1_active, 1         	; if the ability1 is active decrement time of ability
	                            jne  check_2
	                            call dec_ability_time1

	check_2:                    
	                            cmp  isability2_active, 1
	                            jne  moveplayer__
	                            call dec_ability_time2            	; if the ability2 is active decrement time of ability

	moveplayer__:               
	                            push dx                           	;to store time
	                            call MovePlayer1Down              	;return player1 to ground after jump
	                            call MovePlayer2Down              	;return player2 to ground after jump
	                            pop  DX                           	;to get stored time
	                            mov  time_change2,dh              	;store time in time_change2 to compare it with real time next iteration to see if it has changed or not

	;MOV     CX, 0AH         ; four lines to delay to remove the effect of fast refresh rate
	;MOV     DX, 4240H
	;MOV     AH, 86H
	;INT     15H
	                            call end_game                     	;check if game is over
	                            cmp  is_game_over,1
	                            je   game_end
	                            jmp  check_time

	game_end:                   
	                            call draw_end_screen
	                            mov  p1_score, "0"
	                            mov  p2_score,"0"                 	;Resets players' score
	                            mov  is_game_over, 0              	;to start a new game
	                            mov  p1_ablity , "9"
	                            mov  p2_ablity , "9"              	;resets ability timer
	                            cmp  ah,66                        	; if user pressed F8 go to main menu
	                            je   menu_intermediate
	                            jmp  game_end                     	;else do nothing


MAIN ENDP





end MAIN